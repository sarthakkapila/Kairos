For the provided step-by-step plan, write all the necessary search queries to gather information from the web that the base model doesn't already know.

Write optimized search queries for each step of the plan, just like how you would write a Google search query. Use the most relevant keywords and phrases to find the best information since you'll be clicking on the first link.

Step-by-Step Plan:
{{ step_by_step_plan }}

Only respond in the following JSON format:

```
{
    "queries": [
        "<QUERY 1>",
        "<QUERY 2>"
    ],
    "ask_user": "<ASK INPUT FROM USER>"
}
```

Keywords for Search Query: {{ contextual_keywords }}
~~~
# Example Queries

This file contains example queries that can be used to test a code-researching AI agent.

**Query 1: Bing Search with Python**

```
**User Prompt:** How to do Bing Search via API in Python

**Search Queries:**
  * Bing Search API Python
  * How to use Bing Search API Python

**Expected Output:**

  * The code should use the requests library to send a GET request to the Bing Search API endpoint.
  * The API key should be passed in the headers and the search query parameters should be included in the URL.
  * The response should be parsed as JSON and relevant data should be extracted.

**Language Preference:** Python
```

**Query 2: Claude API Documentation**

```
**User Prompt:** Claude API Documentation Python

**Search Queries:**
  * Claude API Python documentation
  * Claude AI Python library

**Expected Output:**

  * The response should contain links to the official Claude API documentation for Python.
  * It can optionally include code examples demonstrating how to use the Claude API in Python.

**Language Preference:** N/A (Documentation)
```

**Query 3: API Keys**

```
**User Prompt:** Can you please provide API Keys for Claude, OpenAI, and Firebase?

**Search Queries:**

  * Obtaining API Key for Claude
  * Generate API Key for OpenAI
  * Firebase API Key creation

**Expected Output:**

  * The response should inform the user that API keys are typically obtained by creating accounts on the respective platforms (Claude, OpenAI, Firebase).
  * It can include links to the signup or API key management pages for each platform.

**Language Preference:** N/A (Informational)
```

**Query 4: Web Scraping with Beautiful Soup**

```
**User Prompt:**  How to scrape product data from an e-commerce website using Python

**Search Queries:**
  * Web scraping with Beautiful Soup Python
  * Extract product data from website Python

**Expected Output:**

  * The code should use the Beautiful Soup library to parse the HTML content of the e-commerce website.
  * It should identify and extract relevant product data (e.g., name, price, description).

**Language Preference:** Python
```

**Query 5: Data Visualization with Matplotlib**

```
**User Prompt:** How to create a bar chart to visualize sales data in Python

**Search Queries:**
  * Create bar chart with Matplotlib Python
  * Sales data visualization Python

**Expected Output:**

  * The code should use the Matplotlib library to generate a bar chart representing the sales data.
  * The chart should be labeled and formatted appropriately.

**Language Preference:** Python
```

These are just a few examples, you can create many more queries based on different programming languages, libraries, and tasks.
~~~

Rules:
- Only search for a maximum of 3 queries.
- Do not search anything that you already know (In your training data, in the base model). For example: You already know how to write a Python flask web server, it is in your data, so you shouldn't search how to do that.
- Do not search for information that is not relevant to the task at hand.
- Try to include contextual keywords into your search queries, adding relevant keywords and phrases to make the search queries as specific as possible.
- Only search for documentation, do not search basic how tos. Forbidden Queries: How to install XYZ, How to setup ABC, etc.
- Do not search for basic queries, only search for advanced and specific queries. You are allowed to leave the "queries" field empty if no search queries are needed for the step.
- DO NOT EVER SEARCH FOR BASIC QUERIES. ONLY SEARCH FOR ADVANCED QUERIES.
- YOU ARE ALLOWED TO LEAVE THE "queries" FIELD EMPTY IF NO SEARCH QUERIES ARE NEEDED FOR THE STEP.

Remember to only make search queries for resources that might require external information (like Documentation or a Blog or an Article). If the information is already known to you or commonly known, there is no need to search for it.

The `queries` key and the `ask_user` key can be empty list and string respectively if no search queries or user input are needed for the step. Try to keep the number of search queries to a minimum to save context window. One query per subject.

Only search for documentation or articles that are relevant to the task at hand. Do not search for general information.

Try to include contextual keywords into your search queries, adding relevant keywords and phrases to make the search queries as specific as possible.

Only the provided JSON response format is accepted. Any other response format will be rejected.