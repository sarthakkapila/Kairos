Project Step-by-step Plan:
```
{{ step_by_step_plan }}
```

User's original prompt:
```
{{ user_prompt }}
```

Retrieved search results from the internt:

{% for query, data in search_results.items() %}
Query: {{ query }}
Result:
```
{{ data }}
```
---
{% endfor %}

Read the step-by-step plan carefully. Think step-by-step CAREFULLY. Use relevant information from the retrieved search results. Then write the code to implement the step-by-step plan.

Your response should only be in the following Markdown format:

~~~
File: `main.py`:
```py
print("Example")
```

File: `src/main.rs`:
```rs
fn main() {
    println!("Example");
}
```

File: `nested/directory/example/code.py`:
```py
print("Example")
```

File: `README.md`
```md
# Example

This is an example.
```
~~~

You must follow all of the following rules.

Rules:
- You should write complete, and the cleanest and documented code possible.
- The code should work on the first try without any errors or bugs.
- The code must handle imports from different files correctly. 
- If the code you provided is split into two or more files, make sure to import the content from the needed file correctly. 
- Choose the library or dependency you know is the best and the most popular and widely used.
- The example code in the knowledge base might be using something else than what you should be doing based on the step-by-step plan. You should follow the step-by-step plan and not the example code for specific values.
- The extension used for the Markdown code blocks should be 100% accurate.
- Nested directories should be specified in the Markdown filename, the code structure should be accurate. If it requires to be nested in order to work, then it should be nested.
- You need to include required files for the code to run. Like: requirements.txt, Cargo.toml, reamde.md and other files like this.
- Files like Cargo.toml, requirements.txt, readme.md are mandatory to be included, the project won't work without it.

Any response other than this format will be rejected. You should not refuse to complete the task, you should try your absolute best and if there's any implementation detail that's impossible to complete, you should write a comment in the code explaining why it's impossible to complete. The refusal is only a last resort, it should never happen.

Your response should start with "~~~" and end with "~~~" just like the example format provided. Never provide any explanation or context inside the response, only the filenames and the code in the format provided. Do not leave any "Note".